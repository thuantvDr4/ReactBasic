{"version":3,"sources":["logo.svg","libs/SearchBox.Component.jsx","components/card/CardItem.Component.js","components/card-list/CardList.Component.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchBox","handleChange","placeholder","className","type","onChange","ev","target","value","Card","card","alt","src","id","name","email","CardList","children","monsters","map","monster","index","App","_MonsterFilter","useRef","useState","setMonsters","searchText","setSearchText","useEffect","fetch","then","res","json","users","current","console","log","_filter","filter","toLowerCase","includes","text","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sRAAe,I,kBCGFA,EAAY,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,aAAqC,IAAvBC,mBAAuB,MAAT,GAAS,EAC/D,OACE,uBACEC,UAAU,aACVC,KAAK,SACLF,YAAaA,EACbG,SAAU,SAACC,GAAD,OAAQL,EAAaK,EAAGC,OAAOC,WCNlCC,G,YAAO,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACrB,OACE,sBAAKP,UAAU,iBAAf,UACE,qBACEQ,IAAI,UACJC,IAAG,+BAA0BF,EAAKG,GAA/B,4BAEL,6BAAKH,GAAQA,EAAKI,OAClB,4BAAIJ,GAAQA,EAAKK,aCPVC,EAAW,SAAC,GAA2B,EAAzBC,SAA0B,IAAhBC,EAAe,EAAfA,SACnC,OACE,qBAAKf,UAAU,YAAf,SACGe,GACCA,EAASC,KAAI,SAACC,EAASC,GACrB,OAAO,cAAC,EAAD,CAA2BX,KAAMU,GAAtB,OAASC,SCoCtBC,MAtCf,WACE,IAAMC,EAAiBC,iBAAO,MADjB,EAEmBC,mBAAS,IAF5B,mBAENP,EAFM,KAEIQ,EAFJ,OAGuBD,mBAAS,IAHhC,mBAGNE,EAHM,KAGMC,EAHN,KA0Bb,OArBAC,qBAAU,WACRC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLR,EAAYQ,GACZX,EAAeY,QAAUD,OAE5B,IAEHL,qBAAU,WAER,GADAO,QAAQC,IAAI,QAASd,EAAeY,SAChCR,EAAY,CACd,IAAMW,EAAUf,EAAeY,QAAQI,QAAO,SAACnB,GAAD,OAC5CA,EAAQN,KAAK0B,cAAcC,SAASd,EAAWa,kBAEjDd,EAAYY,QAEZZ,EAAYH,EAAeY,WAE5B,CAACR,IAGF,sBAAKxB,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACED,YAAa,oBACbD,aAAc,SAACyC,GAAD,OAAUd,EAAcc,MAExC,cAAC,EAAD,CAAUxB,SAAUA,QC5BXyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0c02f859.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\nimport \"./SearchBox.styles.css\";\n\nexport const SearchBox = ({ handleChange, placeholder = \"\" }) => {\n  return (\n    <input\n      className=\"search-box\"\n      type=\"search\"\n      placeholder={placeholder}\n      onChange={(ev) => handleChange(ev.target.value)}\n    />\n  );\n};\n","import React from \"react\";\nimport \"./CardItem.styles.css\";\n\nexport const Card = ({ card }) => {\n  return (\n    <div className=\"cart-container\">\n      <img\n        alt=\"monster\"\n        src={`https://robohash.org/${card.id}?set=set2&size=180x180`}\n      />\n      <h2>{card && card.name}</h2>\n      <p>{card && card.email}</p>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./CardList.styles.css\";\nimport { Card } from \"../card/CardItem.Component\";\n\nexport const CardList = ({ children, monsters }) => {\n  return (\n    <div className=\"card-list\">\n      {monsters &&\n        monsters.map((monster, index) => {\n          return <Card key={\"key:\" + index} card={monster} />;\n        })}\n    </div>\n  );\n};\n","import React, { useState, useEffect, useRef } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n//\nimport { SearchBox } from \"./libs/SearchBox.Component\";\nimport { CardList } from \"./components/card-list/CardList.Component\";\n\nfunction App() {\n  const _MonsterFilter = useRef(null);\n  const [monsters, setMonsters] = useState([]);\n  const [searchText, setSearchText] = useState(\"\");\n\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((res) => res.json())\n      .then((users) => {\n        setMonsters(users);\n        _MonsterFilter.current = users;\n      });\n  }, []);\n\n  useEffect(() => {\n    console.log(\"[]---\", _MonsterFilter.current);\n    if (searchText) {\n      const _filter = _MonsterFilter.current.filter((monster) =>\n        monster.name.toLowerCase().includes(searchText.toLowerCase())\n      );\n      setMonsters(_filter);\n    } else {\n      setMonsters(_MonsterFilter.current);\n    }\n  }, [searchText]);\n\n  return (\n    <div className=\"App\">\n      <h1>Monsters Rolodex</h1>\n      <SearchBox\n        placeholder={\"search monster...\"}\n        handleChange={(text) => setSearchText(text)}\n      />\n      <CardList monsters={monsters} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}